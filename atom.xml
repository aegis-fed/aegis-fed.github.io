<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aegis前端团队</title>
  
  <subtitle>front-end-developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aegis.suzper.com/"/>
  <updated>2017-10-26T03:23:01.941Z</updated>
  <id>http://aegis.suzper.com/</id>
  
  <author>
    <name>Aegis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode insiders 笔记</title>
    <link href="http://aegis.suzper.com/2017/10/26/vscode/"/>
    <id>http://aegis.suzper.com/2017/10/26/vscode/</id>
    <published>2017-10-26T00:54:52.000Z</published>
    <updated>2017-10-26T03:23:01.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="神器vscode-insiders"><a href="#神器vscode-insiders" class="headerlink" title="神器vscode insiders"></a>神器vscode insiders</h2><p>遇到vscode，我放弃了atom，vscode真是越用越喜欢，会让人痴迷，强大的插件系统，没有做不到，只有想不到，下载<a href="https://code.visualstudio.com/insiders" target="_blank" rel="external">vscode insiders</a>可以获得每日构建的最新版本。那么就来记录一下我觉得好用的插件和记录一些问题吧。</p><h3 id="Javascript-ES6-code-snippets"><a href="#Javascript-ES6-code-snippets" class="headerlink" title="Javascript(ES6)code snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets" target="_blank" rel="external">Javascript(ES6)code snippets</a></h3><p>这个插件实现了一些es6最新语法的常用代码片段，例如输入 imd 可以自动生成如下代码片段：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; &#125; <span class="keyword">from</span> <span class="string">'somewhere'</span>;</div></pre></td></tr></table></figure><p>还有更多</p><blockquote><p>imp→    imports entire module import fs from ‘fs’;<br>imn→    imports entire module without module name import ‘animate.css’<br>imd→    imports only a portion of the module using destructing import {rename} from ‘fs’;<br>ime→    imports everything as alias from the module import * as localAlias from ‘fs’;<br>ima→    imports only a portion of the module as alias import { rename as localRename } from ‘fs’;<br>enf→    exports name function export const log = (parameter) =&gt; { console.log(parameter);};<br>edf→    exports default function export default (parameter) =&gt; { console.log(parameter);};<br>ecl→    exports default class export default class Calculator { };<br>ece→    exports default class by extending a base one export default class Calculator extends BaseClass { };<br>fre→    forEach loop in ES6 syntax array.forEach(currentItem =&gt; {})<br>fof→    for … of loop for(const item of object) {}<br>nfn→    creates a named function const add = (params) =&gt; {}<br>dob→    destructing object syntax const {rename} = fs<br>dar→    destructing array syntax const [first, second] = [1,2]<br>sto→    set timeout helper method setTimeout(() =&gt; {});<br>sti→    set interval helper method setInterval(() =&gt; {});<br>prom→    creates a new Promise return new Promise((resolve, reject) =&gt; {});<br>clg→    console log console.log(object)</p></blockquote><p>不仅如此，由于最新的vscode已经支持全局变量自动导入，也就是以上代码写好后{}里面不导入任何模块，但是在当前文件的代码提示中仍然可以获取到全局变量提示，然后自动将变量填入{}中。盗用一下别人的图就是这样：</p><p><img src="http://oifeo8q69.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720171026090409.gif" alt=""></p><p>是不是灰常酷炫，一颗赛艇！</p><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-ico" target="_blank" rel="external">vscode-icons</a></h3><p>这个插件可以修改侧边栏中文件夹的图标，看着更舒服。自己的编辑器，怎么舒服怎么来嘛对不对？</p><p><img src="http://static.zybuluo.com/asce1885/a1rcdpzvtjelup250zw8l780/APYFUechQi3pQ5YBODFg_screenshot_folders.png" alt=""></p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external">ESLint</a></h3><p>这个插件为 VS Code 增加 ESLint 的功能，同样时安装后重启生效。如果使用vue开发，需要做些额外的工作，修改配置文件如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">"eslint.autoFixOnSave": true,</div><div class="line">"eslint.validate": [</div><div class="line">    "javascript",</div><div class="line">    "javascriptreact",</div><div class="line">    &#123; "language": "html", "autoFix": true &#125;,</div><div class="line">    &#123; "language": "vue", "autoFix": true &#125;</div><div class="line">],</div><div class="line">"files.associations": &#123;</div><div class="line">    "*.vue": "vue"</div><div class="line">&#125;,</div><div class="line">"eslint.options": &#123;</div><div class="line">  "plugins": ["html"]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>vue文件是类 HTML 的文件，为了支持对 vue 文件的 ESLint，需要全局安装好所需插件，eslint-plugin-html，最后，别忘了在项目根目录下创建 .eslintrc.json</p><blockquote><p>遇到一个问题，求大神帮忙解决,类似问题<a href="https://segmentfault.com/q/1010000009096282" target="_blank" rel="external">在这里</a>,但是我还没解决</p></blockquote><p><img src="http://oifeo8q69.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720171026092504.png" alt=""></p><p><img src="http://oifeo8q69.bkt.clouddn.com/TIM%E5%9B%BE%E7%89%8720171026092458.png" alt=""></p><h3 id="Atuo-Rename-Tag"><a href="#Atuo-Rename-Tag" class="headerlink" title="Atuo Rename Tag"></a>Atuo Rename Tag</h3><p>修改 html 标签，自动帮你完成尾部闭合标签的同步修改</p><p><img src="https://sfault-image.b0.upaiyun.com/309/180/3091801986-57bcee8b9c0c5_articlex" alt=""></p><h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h3><p>自动路劲补全，默认不带这个功能的，赶紧装</p><p><img src="https://sfault-image.b0.upaiyun.com/281/069/281069640-57bc7829cba1a" alt=""></p><h3 id="fileheader"><a href="#fileheader" class="headerlink" title="fileheader"></a>fileheader</h3><p>顶部注释模板，可定义作者、时间等信息，并会自动更新最后修改时间</p><p><img src="https://sfault-image.b0.upaiyun.com/325/604/3256045897-58bc61141fe71_articlex" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;神器vscode-insiders&quot;&gt;&lt;a href=&quot;#神器vscode-insiders&quot; class=&quot;headerlink&quot; title=&quot;神器vscode insiders&quot;&gt;&lt;/a&gt;神器vscode insiders&lt;/h2&gt;&lt;p&gt;遇到vscode，我放弃了atom，vscode真是越用越喜欢，会让人痴迷，强大的插件系统，没有做不到，只有想不到，下载&lt;a href=&quot;https://code.visualstudio.com/insiders&quot;&gt;vscode insiders&lt;/a&gt;可以获得每日构建的最新版本。那么就来记录一下我觉得好用的插件和记录一些问题吧。&lt;/p&gt;
&lt;h3 id=&quot;Javascript-ES6-code-snippets&quot;&gt;&lt;a href=&quot;#Javascript-ES6-code-snippets&quot; class=&quot;headerlink&quot; title=&quot;Javascript(ES6)code snippets&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets&quot;&gt;Javascript(ES6)code snippets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个插件实现了一些es6最新语法的常用代码片段，例如输入 imd 可以自动生成如下代码片段：&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://aegis.suzper.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vscode" scheme="http://aegis.suzper.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>microtask和macrotask</title>
    <link href="http://aegis.suzper.com/2017/10/23/microtask%E5%92%8Cmacrotask/"/>
    <id>http://aegis.suzper.com/2017/10/23/microtask和macrotask/</id>
    <published>2017-10-23T01:17:37.000Z</published>
    <updated>2017-10-23T01:50:26.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> setTimeout1 = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'------1-------'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">const</span> setTimeout2 = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">Promise</span>.resolve(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'---------2-------'</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'------3-------'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.time(<span class="string">"Promise start"</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</div><div class="line">    (i === <span class="number">10000</span> - <span class="number">1</span>) &amp;&amp; resolve();</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.time(<span class="string">"Promise end"</span>);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'---------4---------'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'---------5---------'</span>);</div></pre></td></tr></table></figure><p>在浏览器中执行以上代码，输出顺序为：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promise时间计时</div><div class="line">---5---</div><div class="line">---4---</div><div class="line">---1---</div><div class="line">---3---</div><div class="line">---2---</div></pre></td></tr></table></figure><p>废话不多说，由于浏览器的任务队列不止一个，包括microtasks(微任务)和macrotasks(宏任务)。</p><p>microtasks有：</p><ul><li>process.nextTick</li><li>promise</li><li>Object.observe</li><li>MutationObserver</li></ul><p>macrotasks有：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>I/O</li><li>UI渲染</li></ul><p>浏览器执行同步和异步任务的整个流程可以浓缩成一句话：</p><blockquote><p>整个的js代码macrotask先执行，同步代码执行完后有microtask执行microtask，没有microtask执行下一个macrotask，如此往复循环至结束</p></blockquote><p>下面的分析都可以带着这句话进行思考。</p><blockquote><p>step1：执行脚本，把这段脚本压入stacks，此时</p></blockquote><p>stacks: [script]<br>macrotasks: []<br>microtasks: []</p><blockquote><p>step2：遇到setTimeout1，setTimeout可当作一个task，所以此时</p></blockquote><p>stacks: [script]<br>macrotasks: [setTimeout1, setTimeout2]<br>microtasks: []</p><blockquote><p>step3：继续往下执行，new Promise，按同步流程往下走，在i = 99999的时候，resolve()发生，把回调成功的代码段压入microtask queue，<br>输出new Promise内的执行时间</p></blockquote><p>stacks: [script]<br>macrotasks: [setTimeout1, setTimeout2]<br>microtasks: [console.log(‘———4———‘)]</p><blockquote><p>step4：继续往下执行就是console.log(‘—5—‘)，此时stacks队列里头的任务结束</p></blockquote><p>stacks: [],<br>macrotasks: [setTimeout1, setTimeout2]<br>microtasks: [console.log(‘———4———‘)]</p><blockquote><p>step5：此时stacks里面为空，推出microtasks里的剩余任务，打印4</p></blockquote><p>stacks: [console.log(‘———4———‘)]<br>macrotasks: [setTimeout1, setTimeout2]<br>microtasks: []</p><blockquote><p>step6：此时microtasks为空，推出macrotasks里的剩余任务，打印setTimeout1里面的1</p></blockquote><p>stacks: [console.log(‘——1——-‘)]<br>macrotasks: [setTimeout2]<br>microtasks: []</p><blockquote><p>step7：继续推出macrotasks里的剩余任务，同时遇到promise,推入到microtasks，打印setTimeout2里面的3</p></blockquote><p>stacks: [console.log(‘——3——-‘)]<br>macrotasks: []<br>microtasks: [console.log(‘———2——-‘)]</p><blockquote><p>step8：此时macrotasks里没有任务了，就开始执行microtasks里面的任务，打印2</p></blockquote><p>stacks: [console.log(‘———2——-‘)]<br>macrotasks: []<br>microtasks: []</p><blockquote><p>step9：此时microtasks里没有任务了，就开始执行macrotasks里面的任务，macrotasks也没有任务了，执行就结束了。</p></blockquote><p>stacks: []<br>macrotasks: []<br>microtasks: []</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器的事件循环&quot;&gt;&lt;a href=&quot;#浏览器的事件循环&quot; class=&quot;headerlink&quot; title=&quot;浏览器的事件循环&quot;&gt;&lt;/a&gt;浏览器的事件循环&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setTimeout1 = setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;------1-------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setTimeout2 = setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.resolve(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;---------2-------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;------3-------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Promise start&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (i === &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;amp;&amp;amp; resolve();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&quot;Promise end&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;---------4---------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;---------5---------&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在浏览器中执行以上代码，输出顺序为：&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://aegis.suzper.com/categories/js/"/>
    
    
      <category term="浏览器" scheme="http://aegis.suzper.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="js" scheme="http://aegis.suzper.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>发布自己的vue组件库</title>
    <link href="http://aegis.suzper.com/2017/10/13/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84vue%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>http://aegis.suzper.com/2017/10/13/发布自己的vue组件库/</id>
    <published>2017-10-13T04:56:12.000Z</published>
    <updated>2017-10-13T08:01:43.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>总结一下最近练习的如何使用npm发布属于自己的vue组件库。虽然不成熟且十分简单，但是还是有收获的，后期会一点一点完善。</p><p>那么接下来的操作都按步骤来：（假设npm包取名cdcomponents）</p><h3 id="vue-cli新建项目"><a href="#vue-cli新建项目" class="headerlink" title="vue-cli新建项目"></a>vue-cli新建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vue init cdcomponents</div><div class="line">cd cdcomponents</div><div class="line">npm i</div></pre></td></tr></table></figure><a id="more"></a><h3 id="修改一些配置"><a href="#修改一些配置" class="headerlink" title="修改一些配置"></a>修改一些配置</h3><p><strong>1. 进入config/index.js, 将其中的build对象修改如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">build: &#123;</div><div class="line">    <span class="attr">env</span>: <span class="built_in">require</span>(<span class="string">'./prod.env'</span>),</div><div class="line">    <span class="attr">assetsRoot</span>: path.resolve(__dirname, <span class="string">'../dist'</span>),</div><div class="line">    <span class="attr">assetsPublicPath</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">assetsSubDirectory</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// Gzip off by default as many popular static hosts such as</span></div><div class="line">    <span class="comment">// Surge or Netlify already gzip all static assets for you.</span></div><div class="line">    <span class="comment">// Before setting to `true`, make sure to:</span></div><div class="line">    <span class="comment">// npm install --save-dev compression-webpack-plugin</span></div><div class="line">    productionGzip: <span class="literal">false</span>,</div><div class="line">    <span class="attr">productionGzipExtensions</span>: [<span class="string">'js'</span>, <span class="string">'css'</span>],</div><div class="line">    <span class="comment">// Run the build command with an extra argument to</span></div><div class="line">    <span class="comment">// View the bundle analyzer report after build finishes:</span></div><div class="line">    <span class="comment">// `npm run build --report`</span></div><div class="line">    <span class="comment">// Set to `true` or `false` to always turn it on or off</span></div><div class="line">    bundleAnalyzerReport: process.env.npm_config_report</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这样打包的时候只会将入口文件的信息打包成一个js文件和一个css放到dist目录下面。</p><p><strong>2. 修改webpack.prod.config.js下面的output参数，并删除一些没用的配置，最终修改如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</div><div class="line"><span class="keyword">var</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</div><div class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> env = config.build.env</div><div class="line"></div><div class="line"><span class="keyword">var</span> webpackConfig = merge(baseWebpackConfig, &#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: utils.styleLoaders(&#123;</div><div class="line">      <span class="attr">sourceMap</span>: config.build.productionSourceMap,</div><div class="line">      <span class="attr">extract</span>: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devtool</span>: config.build.productionSourceMap ? <span class="string">'#source-map'</span> : <span class="literal">false</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: config.build.assetsRoot,</div><div class="line">    <span class="attr">publicPath</span>: config.build.assetsPublicPath,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'cdcomponents.min.js'</span>,</div><div class="line">    <span class="attr">library</span>: <span class="string">'CdComponents'</span>,</div><div class="line">    <span class="attr">libraryTarget</span>: <span class="string">'umd'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">'process.env'</span>: env</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">    <span class="comment">// extract css into its own file</span></div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'cdcomponents.min.css'</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> OptimizeCSSPlugin()</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = webpackConfig</div></pre></td></tr></table></figure><h3 id="开始写组件"><a href="#开始写组件" class="headerlink" title="开始写组件"></a>开始写组件</h3><p>组件的具体实现过程我就不阐述了，最终的src目录和packages目录结构如下：</p><p>其中packages放置各个组件，src里面的main.js进行组件的插件化处理</p><p><img src="http://oifeo8q69.bkt.clouddn.com/npmpost1.jpg" alt=""></p><p>packages/rating/index.js文件如下，这里加了install方法是为了后面留出口的时候，用户使用可以直接引入单组件，而不必引入整个组件库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Rating <span class="keyword">from</span> <span class="string">'./src/rating.vue'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* istanbul ignore next */</span></div><div class="line">Rating.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</div><div class="line">  Vue.component(Rating.name, Rating);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Rating;</div></pre></td></tr></table></figure><p>后续使用单组件就可以类似这样实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Rating &#125; <span class="keyword">from</span> <span class="string">'cdcomponents'</span>;</div><div class="line"></div><div class="line">此处省略...</div><div class="line"></div><div class="line">export <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;Rating /&gt;'</span>,</div><div class="line">  <span class="attr">components</span>: &#123; Rating &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>packages/rating/src/rating.vue文件， 组件我就不写了，主要实现了五星评价的功能。</p><p>src/main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// import Vue from 'vue';</span></div><div class="line"><span class="comment">// import App from './App.vue';</span></div><div class="line"><span class="keyword">import</span> Rating <span class="keyword">from</span> <span class="string">'../packages/ratings'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = [</div><div class="line">  Rating</div><div class="line">];</div><div class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">vue</span>) </span>&#123;</div><div class="line">  <span class="comment">/* istanbul ignore if */</span></div><div class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">/*eslint-disable*/</span></div><div class="line">  components.map(<span class="function">(<span class="params">component</span>) =&gt;</span> &#123;</div><div class="line">    vue.component(component.name, component);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* istanbul ignore if */</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</div><div class="line">  install(<span class="built_in">window</span>.Vue);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试的时候加上注释</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  install,</div><div class="line">  Rating</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 测试的时候打开注释</span></div><div class="line"><span class="comment">// Vue.use(install);</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// export default new Vue(&#123;</span></div><div class="line"><span class="comment">//   el: '#app',</span></div><div class="line"><span class="comment">//   template: '&lt;App/&gt;',</span></div><div class="line"><span class="comment">//   components: &#123; App &#125;</span></div><div class="line"><span class="comment">// &#125;);</span></div></pre></td></tr></table></figure><p>至此，组件的组件的注册插件都写好了，最后一步就是稍微修改一下package.json文件：<br>因为这个组件包是能公用的，所以”private”: false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"private"</span>: <span class="literal">false</span>,</div><div class="line"><span class="string">"main"</span>: <span class="string">"dist/cdcomponents.min.js"</span>,</div></pre></td></tr></table></figure><p>这里的main配置意思是，别人用这个包 import CdComponents from ‘cdcomponents’; 时，引入的文件。<br>至此，你的npm包就可以发布到网上，当别人npm i –save cdcomponents以后，在项目中可以使用以下方式引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> CdComponents <span class="keyword">from</span> <span class="string">'cdcomponents'</span>; <span class="comment">// 默认引入 dist/cdcomponents.min.js</span></div><div class="line"><span class="keyword">import</span> <span class="string">'cdcomponents/dist/cdcomponents.min.css'</span>;</div><div class="line"></div><div class="line">Vue.use(CdComponents);</div></pre></td></tr></table></figure><h3 id="npm-发布"><a href="#npm-发布" class="headerlink" title="npm 发布"></a>npm 发布</h3><p>首先在本地执行<code>npm adduser</code>,如果有账号就直接输入用户名密码登录，如果没有要先去官网注册一下账号。</p><p>然后打包本地文件，<code>npm run build</code>，这时根目录下就会出现dist文件夹，里面包含了打包好的js和css文件。</p><p>然后执行<code>npm publish</code>就可以发布到npm上面啦！大功告成</p><p>如果后期需要更新包，那就执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm run build</div><div class="line">npm version patch //小版本更新</div><div class="line">npm publish</div><div class="line"></div><div class="line">想要删除包</div><div class="line">npm unpublish --force</div></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><a href="https://github.com/zp1112/cdcomponents" target="_blank" rel="external">github地址</a><br><a href="https://www.npmjs.com/package/cdcomponents" target="_blank" rel="external">npm地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;总结一下最近练习的如何使用npm发布属于自己的vue组件库。虽然不成熟且十分简单，但是还是有收获的，后期会一点一点完善。&lt;/p&gt;
&lt;p&gt;那么接下来的操作都按步骤来：（假设npm包取名cdcomponents）&lt;/p&gt;
&lt;h3 id=&quot;vue-cli新建项目&quot;&gt;&lt;a href=&quot;#vue-cli新建项目&quot; class=&quot;headerlink&quot; title=&quot;vue-cli新建项目&quot;&gt;&lt;/a&gt;vue-cli新建项目&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vue init cdcomponents&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd cdcomponents&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm i&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://aegis.suzper.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="http://aegis.suzper.com/tags/vue/"/>
    
      <category term="javascript" scheme="http://aegis.suzper.com/tags/javascript/"/>
    
      <category term="npm" scheme="http://aegis.suzper.com/tags/npm/"/>
    
  </entry>
  
</feed>
